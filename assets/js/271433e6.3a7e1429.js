"use strict";(self.webpackChunknestjs_toolkit_docs=self.webpackChunknestjs_toolkit_docs||[]).push([[3490],{1063:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"URN","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Quickstart","href":"/libraries/docs/urn/intro","docId":"urn/intro","unlisted":false},{"type":"link","label":"Introduction","href":"/libraries/docs/urn/why","docId":"urn/why","unlisted":false},{"type":"link","label":"Using in MongoDB","href":"/libraries/docs/urn/mongo","docId":"urn/mongo","unlisted":false}],"href":"/libraries/docs/category/urn"},{"type":"category","label":"NestJS Workflow","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Quickstart","href":"/libraries/docs/workflow/quickstart","docId":"workflow/quickstart","unlisted":false},{"type":"link","label":"Introduction","href":"/libraries/docs/workflow/intro","docId":"workflow/intro","unlisted":false},{"type":"link","label":"Why","href":"/libraries/docs/workflow/workflows","docId":"workflow/workflows","unlisted":false},{"type":"link","label":"Errors & Logging","href":"/libraries/docs/workflow/errors","docId":"workflow/errors","unlisted":false},{"type":"link","label":"Kafka Integration","href":"/libraries/docs/workflow/kafka","docId":"workflow/kafka","unlisted":false},{"type":"link","label":"Use Case","href":"/libraries/docs/workflow/usecase","docId":"workflow/usecase","unlisted":false}],"href":"/libraries/docs/category/nestjs-workflow"},{"type":"category","label":"NestJS Kafka Client","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/libraries/docs/kafka/introduction","docId":"kafka/introduction","unlisted":false},{"type":"link","label":"Installation & Setup","href":"/libraries/docs/kafka/installation","docId":"kafka/installation","unlisted":false},{"type":"link","label":"Configuration","href":"/libraries/docs/kafka/configuration","docId":"kafka/configuration","unlisted":false},{"type":"link","label":"Kafka Consumer","href":"/libraries/docs/kafka/consumer","docId":"kafka/consumer","unlisted":false},{"type":"link","label":"Kafka Producer","href":"/libraries/docs/kafka/producer","docId":"kafka/producer","unlisted":false},{"type":"link","label":"Advanced Features","href":"/libraries/docs/kafka/advanced-features","docId":"kafka/advanced-features","unlisted":false},{"type":"link","label":"Best Practices","href":"/libraries/docs/kafka/best-practices","docId":"kafka/best-practices","unlisted":false},{"type":"link","label":"NestJS Kafka Client","href":"/libraries/docs/kafka/","docId":"kafka/index","unlisted":false},{"type":"link","label":"Troubleshooting","href":"/libraries/docs/kafka/troubleshooting","docId":"kafka/troubleshooting","unlisted":false}],"href":"/libraries/docs/category/nestjs-kafka-client"}]},"docs":{"kafka/advanced-features":{"id":"kafka/advanced-features","title":"Advanced Features","description":"This section covers the enterprise-grade features that make this Kafka client suitable for production environments.","sidebar":"tutorialSidebar"},"kafka/best-practices":{"id":"kafka/best-practices","title":"Best Practices","description":"This guide covers production-ready best practices for using the NestJS Kafka Client effectively and safely.","sidebar":"tutorialSidebar"},"kafka/configuration":{"id":"kafka/configuration","title":"Configuration","description":"Complete configuration reference for the NestJS Kafka Client.","sidebar":"tutorialSidebar"},"kafka/consumer":{"id":"kafka/consumer","title":"Kafka Consumer","description":"The Consumer decorator provides enterprise-grade message consumption with advanced batch processing, key-based grouping, and automatic pressure management.","sidebar":"tutorialSidebar"},"kafka/index":{"id":"kafka/index","title":"NestJS Kafka Client","description":"A production-ready NestJS module for Kafka client and consumer functionality built on top of kafkajs. This library provides enterprise-grade features including intelligent batch processing, idempotency guarantees, key-based grouping, and automatic pressure management.","sidebar":"tutorialSidebar"},"kafka/installation":{"id":"kafka/installation","title":"Installation & Setup","description":"Installation","sidebar":"tutorialSidebar"},"kafka/introduction":{"id":"kafka/introduction","title":"Introduction","description":"In the landscape of NestJS Kafka integrations, @jescrich/nestjs-kafka-client stands out as a production-ready solution that addresses the most critical challenges faced by high-throughput distributed systems: backpressure management, front pressure handling, and reliable message processing at scale. While other libraries provide basic Kafka integration, this package delivers enterprise-grade features that are typically custom-built for each production system.","sidebar":"tutorialSidebar"},"kafka/producer":{"id":"kafka/producer","title":"Kafka Producer","description":"The KafkaClient provides high-performance message production with intelligent connection management and automatic batching capabilities.","sidebar":"tutorialSidebar"},"kafka/troubleshooting":{"id":"kafka/troubleshooting","title":"Troubleshooting","description":"Common issues and solutions when using the NestJS Kafka Client.","sidebar":"tutorialSidebar"},"urn/intro":{"id":"urn/intro","title":"URN Utility (@jescrich/urn)","description":"Overview","sidebar":"tutorialSidebar"},"urn/mongo":{"id":"urn/mongo","title":"Using in MongoDB","description":"Introduction to URNs in MongoDB","sidebar":"tutorialSidebar"},"urn/why":{"id":"urn/why","title":"Introduction to URNs","description":"Definition and Structure scheme and names a resource in a global, persistent manner (Uniform Resource Name - Wikipedia). In contrast to a URL which specifies where a resource is located, a URN is location-independent \u2013 it identifies a resource by name or identity, not by address. The general syntax of a URN is urn:","sidebar":"tutorialSidebar"},"workflow/errors":{"id":"workflow/errors","title":"Errors Handling and Logging","description":"Robust error handling is integral to workflows and state machines. In the context of NestJS Workflow, the service provides a built-in fallback mechanism to manage errors during state transitions. This mechanism is defined in the workflow definition as a Fallback function:","sidebar":"tutorialSidebar"},"workflow/intro":{"id":"workflow/intro","title":"NestJS Workflow & State Machine","description":"## Overview","sidebar":"tutorialSidebar"},"workflow/kafka":{"id":"workflow/kafka","title":"Implementing Kafka Integration with NestJS Workflow","description":"This documentation explains how to integrate Apache Kafka with the NestJS Workflow engine to create event-driven workflows that respond to Kafka messages.","sidebar":"tutorialSidebar"},"workflow/quickstart":{"id":"workflow/quickstart","title":"Quickstart","description":"Implementing Order Processing with NestJS Workflow","sidebar":"tutorialSidebar"},"workflow/usecase":{"id":"workflow/usecase","title":"Use Case","description":"Medical Prescription Order Workflow with NestJS Workflow & Kafka Integration","sidebar":"tutorialSidebar"},"workflow/workflows":{"id":"workflow/workflows","title":"Why...","description":"Workflow and State Machine Patterns for Robust Application Architecture","sidebar":"tutorialSidebar"}}}}')}}]);