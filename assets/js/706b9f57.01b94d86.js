"use strict";(self.webpackChunknestjs_toolkit_docs=self.webpackChunknestjs_toolkit_docs||[]).push([[2423],{1353:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"workflow/kafka","title":"Implementing Kafka Integration with NestJS Workflow","description":"This documentation explains how to integrate Apache Kafka with the NestJS Workflow engine to create event-driven workflows that respond to Kafka messages.","source":"@site/docs/workflow/kafka.md","sourceDirName":"workflow","slug":"/workflow/kafka","permalink":"/libraries/docs/workflow/kafka","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"sidebar_label":"Kafka Integration"},"sidebar":"tutorialSidebar","previous":{"title":"Errors & Logging","permalink":"/libraries/docs/workflow/errors"},"next":{"title":"Use Case","permalink":"/libraries/docs/workflow/usecase"}}');var t=r(4848),i=r(8453);const s={sidebar_position:4,sidebar_label:"Kafka Integration"},a="Implementing Kafka Integration with NestJS Workflow",l={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Basic Kafka Integration",id:"basic-kafka-integration",level:2},{value:"Step 1: Configure Kafka in Your Workflow Definition",id:"step-1-configure-kafka-in-your-workflow-definition",level:3},{value:"Step 2: Register the Workflow Module",id:"step-2-register-the-workflow-module",level:3},{value:"Message Format Requirements",id:"message-format-requirements",level:2},{value:"Advanced Kafka Configuration",id:"advanced-kafka-configuration",level:2},{value:"Publishing Events to Kafka",id:"publishing-events-to-kafka",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Testing Kafka Integration",id:"testing-kafka-integration",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"implementing-kafka-integration-with-nestjs-workflow",children:"Implementing Kafka Integration with NestJS Workflow"})}),"\n",(0,t.jsx)(n.p,{children:"This documentation explains how to integrate Apache Kafka with the NestJS Workflow engine to create event-driven workflows that respond to Kafka messages."}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A running NestJS application"}),"\n",(0,t.jsx)(n.li,{children:"Basic understanding of workflow concepts"}),"\n",(0,t.jsx)(n.li,{children:"Access to a Kafka broker"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.p,{children:"First, install the NestJS Workflow package:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install @jescrich/nestjs-workflow\n"})}),"\n",(0,t.jsx)(n.p,{children:"You'll also need the Kafka client libraries:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install kafkajs\n"})}),"\n",(0,t.jsx)(n.h2,{id:"basic-kafka-integration",children:"Basic Kafka Integration"}),"\n",(0,t.jsx)(n.h3,{id:"step-1-configure-kafka-in-your-workflow-definition",children:"Step 1: Configure Kafka in Your Workflow Definition"}),"\n",(0,t.jsx)(n.p,{children:"Add a Kafka property to your workflow definition that specifies:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Kafka broker addresses"}),"\n",(0,t.jsx)(n.li,{children:"Topic-to-event mappings"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { WorkflowDefinition } from '@jescrich/nestjs-workflow';\nimport { Order, OrderEvent, OrderStatus } from '../models/order.model';\n\nexport const orderWorkflowDefinition = (entity: Order): WorkflowDefinition<Order, any, OrderEvent, OrderStatus> => {\n  return {\n    // Standard workflow configuration\n    FinalStates: [OrderStatus.Completed, OrderStatus.Failed],\n    IdleStates: [OrderStatus.Pending, OrderStatus.Processing, OrderStatus.Completed, OrderStatus.Failed],\n    Transitions: [\n      // Your transitions here\n    ],\n    FailedState: OrderStatus.Failed,\n    \n    // Kafka configuration\n    Kafka: {\n      brokers: 'localhost:9092', // Comma-separated list for multiple brokers\n      events: [\n        { topic: 'orders.submitted', event: OrderEvent.Submit },\n        { topic: 'orders.completed', event: OrderEvent.Complete },\n        { topic: 'orders.failed', event: OrderEvent.Fail }\n      ]\n    },\n    \n    Entity: {\n      // Entity configuration\n      new: () => new Order(),\n      update: async (entity: Order, status: OrderStatus) => {\n        entity.status = status;\n        return entity;\n      },\n      load: async (urn: string) => {\n        // Load entity from your database\n        return yourRepository.findByUrn(urn);\n      },\n      status: (entity: Order) => entity.status,\n      urn: (entity: Order) => entity.urn\n    }\n  };\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"order-workflow.definition.ts"})}),"\n",(0,t.jsx)(n.h3,{id:"step-2-register-the-workflow-module",children:"Step 2: Register the Workflow Module"}),"\n",(0,t.jsx)(n.p,{children:"Register your workflow with the Kafka configuration in your module:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Module } from '@nestjs/common';\nimport { WorkflowModule } from '@jescrich/nestjs-workflow';\nimport { orderWorkflowDefinition } from '../workflows/order-workflow.definition';\nimport { OrderRepository } from '../repositories/order.repository';\nimport { OrderService } from '../services/order.service';\n\n@Module({\n  imports: [\n    WorkflowModule.register({\n      name: 'orderWorkflow',\n      definition: orderWorkflowDefinition,\n    }),\n  ],\n  providers: [OrderRepository, OrderService],\n  exports: [OrderService],\n})\nexport class OrderModule {}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"order.module.ts"})}),"\n",(0,t.jsx)(n.h2,{id:"message-format-requirements",children:"Message Format Requirements"}),"\n",(0,t.jsx)(n.p,{children:"For the workflow engine to process Kafka messages correctly, your messages must include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"An entity URN to identify which entity the message applies to"}),"\n",(0,t.jsx)(n.li,{children:"Any additional payload data needed for workflow processing"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example Kafka message format:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "urn": "urn:order:123",\n  "price": 150,\n  "items": ["Item 1", "Item 2"]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-kafka-configuration",children:"Advanced Kafka Configuration"}),"\n",(0,t.jsx)(n.p,{children:"For more advanced Kafka configurations, you can provide additional options:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"Kafka: {\n  brokers: 'kafka-broker-1:9092,kafka-broker-2:9092',\n  clientId: 'order-workflow-service',\n  groupId: 'order-workflow-consumers',\n  ssl: true,\n  sasl: {\n    mechanism: 'plain',\n    username: 'your-username',\n    password: 'your-password'\n  },\n  events: [\n    { topic: 'orders.submitted', event: OrderEvent.Submit },\n    { topic: 'orders.completed', event: OrderEvent.Complete },\n    { topic: 'orders.failed', event: OrderEvent.Fail }\n  ]\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"order-workflow.definition.ts"})}),"\n",(0,t.jsx)(n.h2,{id:"publishing-events-to-kafka",children:"Publishing Events to Kafka"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Injectable } from '@nestjs/common';\nimport { WorkflowService } from '@jescrich/nestjs-workflow';\nimport { Order, OrderEvent, OrderStatus } from '../models/order.model';\nimport { Kafka } from 'kafkajs';\n\n@Injectable()\nexport class OrderService {\n  private kafka: Kafka;\n  private producer;\n\n  constructor(\n    private readonly workflowService: WorkflowService<Order, any, OrderEvent, OrderStatus>,\n  ) {\n    // Initialize Kafka producer\n    this.kafka = new Kafka({\n      clientId: 'order-service',\n      brokers: ['localhost:9092'],\n    });\n    this.producer = this.kafka.producer();\n    this.producer.connect();\n  }\n\n  async submitOrder(orderId: string) {\n    // Publish to Kafka\n    await this.producer.send({\n      topic: 'orders.submitted',\n      messages: [\n        { \n          value: JSON.stringify({\n            urn: `urn:order:${orderId}`,\n            timestamp: new Date().toISOString()\n          }) \n        },\n      ],\n    });\n    \n    // The workflow will automatically process this event when it receives it from Kafka\n    return { success: true, message: 'Order submission event published' };\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"order.service.ts"})}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.p,{children:"When integrating with Kafka, implement proper error handling:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// In your workflow definition\nTransitions: [\n  {\n    from: OrderStatus.Processing,\n    to: OrderStatus.Failed,\n    event: OrderEvent.Fail,\n    actions: [\n      async (entity: Order, payload: any) => {\n        // Log the failure\n        console.error(`Order ${entity.urn} failed processing`, payload);\n        \n        // You could also publish to a dead letter queue\n        await kafkaProducer.send({\n          topic: 'orders.deadletter',\n          messages: [{ value: JSON.stringify({ urn: entity.urn, error: payload.error }) }],\n        });\n        \n        return entity;\n      }\n    ]\n  }\n]\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"order-workflow.definition.ts"})}),"\n",(0,t.jsx)(n.h2,{id:"testing-kafka-integration",children:"Testing Kafka Integration"}),"\n",(0,t.jsx)(n.p,{children:"For testing, you can use an in-memory Kafka implementation or mock the Kafka client:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Test, TestingModule } from '@nestjs/testing';\nimport { WorkflowModule } from '@jescrich/nestjs-workflow';\nimport { orderWorkflowDefinition } from '../workflows/order-workflow.definition';\n\n// Mock Kafka client\njest.mock('kafkajs', () => {\n  return {\n    Kafka: jest.fn().mockImplementation(() => {\n      return {\n        consumer: jest.fn().mockReturnValue({\n          connect: jest.fn(),\n          subscribe: jest.fn(),\n          run: jest.fn(),\n          disconnect: jest.fn(),\n        }),\n      };\n    }),\n  };\n});\n\ndescribe('Order Workflow with Kafka', () => {\n  let app;\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        WorkflowModule.register({\n          name: 'orderWorkflow',\n          definition: orderWorkflowDefinition,\n        }),\n      ],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    await app.init();\n  });\n\n  it('should process Kafka messages correctly', async () => {\n    // Test implementation\n  });\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"order-workflow.spec.ts"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Consumer Groups: Use meaningful consumer group IDs to ensure proper message distribution"}),"\n",(0,t.jsx)(n.li,{children:"Error Handling: Implement robust error handling for Kafka connection issues"}),"\n",(0,t.jsx)(n.li,{children:"Message Validation: Validate incoming Kafka messages before processing"}),"\n",(0,t.jsx)(n.li,{children:"Idempotency: Design your workflow to handle duplicate messages gracefully"}),"\n",(0,t.jsx)(n.li,{children:"Monitoring: Set up monitoring for your Kafka consumers to track performance and errors"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"By integrating Kafka with NestJS Workflow, you can create powerful event-driven workflows that respond to messages from your event streaming platform. This enables building scalable, loosely-coupled systems where workflow state transitions are triggered by events flowing through your Kafka topics."})]})}function f(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var o=r(6540);const t={},i=o.createContext(t);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);