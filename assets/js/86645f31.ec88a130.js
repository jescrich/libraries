"use strict";(self.webpackChunknestjs_toolkit_docs=self.webpackChunknestjs_toolkit_docs||[]).push([[2150],{1662:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"workflow/quickstart","title":"Quickstart","description":"Implementing Order Processing with NestJS Workflow","source":"@site/docs/workflow/quickstart.md","sourceDirName":"workflow","slug":"/workflow/quickstart","permalink":"/libraries/docs/workflow/quickstart","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"Quickstart"},"sidebar":"tutorialSidebar","previous":{"title":"NestJS Workflow","permalink":"/libraries/docs/category/nestjs-workflow"},"next":{"title":"Introduction","permalink":"/libraries/docs/workflow/intro"}}');var o=r(4848),s=r(8453);const i={sidebar_position:1,sidebar_label:"Quickstart"},l="Quickstart",d={},a=[{value:"Implementing Order Processing with NestJS Workflow",id:"implementing-order-processing-with-nestjs-workflow",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Install the NestJS Workflow Module",id:"step-1-install-the-nestjs-workflow-module",level:2},{value:"Step 2: Define the Order Entity and Enums",id:"step-2-define-the-order-entity-and-enums",level:2},{value:"Step 3: Define the Workflow",id:"step-3-define-the-workflow",level:2},{value:"Step 4: Register the Workflow Module",id:"step-4-register-the-workflow-module",level:2},{value:"Step 5: Utilize the Workflow in a Service",id:"step-5-utilize-the-workflow-in-a-service",level:2},{value:"Step 6: Implement Class-Based Actions with Decorators",id:"step-6-implement-class-based-actions-with-decorators",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"quickstart",children:"Quickstart"})}),"\n",(0,o.jsx)(n.h2,{id:"implementing-order-processing-with-nestjs-workflow",children:"Implementing Order Processing with NestJS Workflow"}),"\n",(0,o.jsx)(n.p,{children:"This guide will walk you through setting up the NestJS Workflow module to manage the state transitions of an order processing system."}),"\n",(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"A NestJS application set up with TypeScript."}),"\n",(0,o.jsx)(n.li,{children:"Node.js and npm installed."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"step-1-install-the-nestjs-workflow-module",children:"Step 1: Install the NestJS Workflow Module"}),"\n",(0,o.jsx)(n.p,{children:"Install the module using npm:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm install @jescrich/nestjs-workflow\n"})}),"\n",(0,o.jsx)(n.p,{children:"Or with yarn:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"yarn add @jescrich/nestjs-workflow\n"})}),"\n",(0,o.jsx)(n.h2,{id:"step-2-define-the-order-entity-and-enums",children:"Step 2: Define the Order Entity and Enums"}),"\n",(0,o.jsxs)(n.p,{children:["Create the ",(0,o.jsx)(n.code,{children:"Order"})," entity along with enums for order events and statuses:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// order.model.ts\n\nexport enum OrderEvent {\n  Create = 'order.create',\n  Submit = 'order.submit',\n  Update = 'order.update',\n  Complete = 'order.complete',\n  Fail = 'order.fail',\n  Cancel = 'order.cancel',\n}\n\nexport enum OrderStatus {\n  Pending = 'pending',\n  Processing = 'processing',\n  Completed = 'completed',\n  Failed = 'failed',\n}\n\nexport class Order {\n  urn: string;\n  name: string;\n  price: number;\n  items: string[];\n  status: OrderStatus;\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"step-3-define-the-workflow",children:"Step 3: Define the Workflow"}),"\n",(0,o.jsx)(n.p,{children:"Create a workflow definition that outlines the states and transitions for the order:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// order.workflow.ts\n\nimport { WorkflowDefinition } from '@jescrich/nestjs-workflow';\nimport { Order, OrderEvent, OrderStatus } from './order.model';\n\nexport const orderWorkflowDefinition: WorkflowDefinition<Order, any, OrderEvent, OrderStatus> = {\n  FinalStates: [OrderStatus.Completed, OrderStatus.Failed],\n  IdleStates: [OrderStatus.Pending, OrderStatus.Processing, OrderStatus.Completed, OrderStatus.Failed],\n  Transitions: [\n    {\n      from: OrderStatus.Pending,\n      to: OrderStatus.Processing,\n      event: OrderEvent.Submit,\n      conditions: [(entity: Order) => entity.price > 10],\n    },\n    {\n      from: OrderStatus.Pending,\n      to: OrderStatus.Pending,\n      event: OrderEvent.Update,\n      actions: [\n        (entity: Order, payload: any) => {\n          entity.price = payload.price;\n          entity.items = payload.items;\n          return Promise.resolve(entity);\n        },\n      ],\n    },\n    {\n      from: OrderStatus.Processing,\n      to: OrderStatus.Completed,\n      event: OrderEvent.Complete,\n    },\n    {\n      from: OrderStatus.Processing,\n      to: OrderStatus.Failed,\n      event: OrderEvent.Fail,\n    },\n  ],\n  FailedState: OrderStatus.Failed,\n  Entity: {\n    new: () => new Order(),\n    update: async (entity: Order, status: OrderStatus) => {\n      entity.status = status;\n      return entity;\n    },\n    load: async (urn: string) => {\n      // Implement logic to load the order entity by URN\n      return new Order(); // Placeholder implementation\n    },\n    status: (entity: Order) => entity.status,\n    urn: (entity: Order) => entity.urn,\n  },\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"step-4-register-the-workflow-module",children:"Step 4: Register the Workflow Module"}),"\n",(0,o.jsxs)(n.p,{children:["Import and register the ",(0,o.jsx)(n.code,{children:"WorkflowModule"})," in your NestJS application module:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// app.module.ts\n\nimport { Module } from '@nestjs/common';\nimport { WorkflowModule } from '@jescrich/nestjs-workflow';\nimport { orderWorkflowDefinition } from './order.workflow';\n\n@Module({\n  imports: [\n    WorkflowModule.register({\n      name: 'orderWorkflow',\n      definition: orderWorkflowDefinition,\n    }),\n    WorkflowModule.forRoot({\n      storage: {\n        type: 'memory', // For production, consider using 'database'\n      },\n    }),\n  ],\n})\nexport class AppModule {}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"step-5-utilize-the-workflow-in-a-service",children:"Step 5: Utilize the Workflow in a Service"}),"\n",(0,o.jsx)(n.p,{children:"Inject the workflow into your service and define methods to handle order events:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// order.service.ts\n\nimport { Injectable, Inject } from '@nestjs/common';\nimport { Workflow } from '@jescrich/nestjs-workflow';\nimport { Order, OrderEvent } from './order.model';\n\n@Injectable()\nexport class OrderService {\n  constructor(\n    @Inject('orderWorkflow')\n    private readonly orderWorkflow: Workflow<Order, OrderEvent>,\n  ) {}\n\n  async submitOrder(urn: string) {\n    return await this.orderWorkflow.emit({ urn, event: OrderEvent.Submit });\n  }\n\n  async updateOrder(urn: string, price: number, items: string[]) {\n    return await this.orderWorkflow.emit({\n      urn,\n      event: OrderEvent.Update,\n      payload: { price, items },\n    });\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"step-6-implement-class-based-actions-with-decorators",children:"Step 6: Implement Class-Based Actions with Decorators"}),"\n",(0,o.jsx)(n.p,{children:"For more complex workflows, you can define actions using decorators:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// order.actions.ts\n\nimport { Injectable } from '@nestjs/common';\nimport { WorkflowAction, OnEvent, OnStatusChanged } from '@jescrich/nestjs-workflow';\nimport { Order, OrderEvent, OrderStatus } from './order.model';\n\n@Injectable()\n@WorkflowAction()\nexport class OrderActions {\n  @OnEvent({ event: OrderEvent.Submit })\n  execute({ entity, payload }: { entity: Order; payload: any }) {\n    entity.price *= 100;\n    return Promise.resolve(entity);\n  }\n\n  @OnStatusChanged({ from: OrderStatus.Pending, to: OrderStatus.Processing })\n  onProcessing({ entity }: { entity: Order }) {\n    entity.name = 'Processing Order';\n    return Promise.resolve(entity);\n  }\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Ensure to register these action classes as providers in your module:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// app.module.ts\n\nimport { Module } from '@nestjs/common';\nimport { WorkflowModule } from '@jescrich/nestjs-workflow';\nimport { orderWorkflowDefinition } from './order.workflow';\nimport { OrderActions } from './order.actions';\n\n@Module({\n  imports: [\n    WorkflowModule.register({\n      name: 'orderWorkflow',\n      definition: orderWorkflowDefinition,\n    }),\n    WorkflowModule.forRoot({\n      storage: {\n        type: 'memory',\n      },\n    }),\n  ],\n  providers: [OrderActions],\n})\nexport class AppModule {}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(n.p,{children:"By following these steps, you've set up the NestJS Workflow module to manage the state transitions of an order processing system. This structured approach enhances code maintainability and aligns with best practices for enterprise application development."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var t=r(6540);const o={},s=t.createContext(o);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);