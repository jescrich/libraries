"use strict";(self.webpackChunknestjs_toolkit_docs=self.webpackChunknestjs_toolkit_docs||[]).push([[7813],{2908:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"kafka/configuration","title":"Configuration Reference - NestJS Kafka Client","description":"Complete configuration guide for NestJS Kafka client including producer settings, consumer options, SSL/SASL authentication, environment variables, and production tuning.","source":"@site/docs/kafka/configuration.md","sourceDirName":"kafka","slug":"/kafka/configuration","permalink":"/libraries/docs/kafka/configuration","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Configuration Reference - NestJS Kafka Client","description":"Complete configuration guide for NestJS Kafka client including producer settings, consumer options, SSL/SASL authentication, environment variables, and production tuning.","keywords":["Kafka Configuration","NestJS Configuration","Producer Settings","Consumer Options","SSL Configuration","SASL Authentication","Environment Variables"]},"sidebar":"tutorialSidebar","previous":{"title":"installation","permalink":"/libraries/docs/kafka/installation"},"next":{"title":"consumer","permalink":"/libraries/docs/kafka/consumer"}}');var t=i(4848),r=i(8453);const a={sidebar_position:3,title:"Configuration Reference - NestJS Kafka Client",description:"Complete configuration guide for NestJS Kafka client including producer settings, consumer options, SSL/SASL authentication, environment variables, and production tuning.",keywords:["Kafka Configuration","NestJS Configuration","Producer Settings","Consumer Options","SSL Configuration","SASL Authentication","Environment Variables"]},s="Configuration",c={},l=[{value:"Module Configuration",id:"module-configuration",level:2},{value:"Basic Configuration",id:"basic-configuration",level:3},{value:"Complete Configuration Options",id:"complete-configuration-options",level:3},{value:"Producer Configuration",id:"producer-configuration",level:2},{value:"Basic Producer Settings",id:"basic-producer-settings",level:3},{value:"Advanced Producer Configuration",id:"advanced-producer-configuration",level:3},{value:"Consumer Configuration",id:"consumer-configuration",level:2},{value:"Basic Consumer Settings",id:"basic-consumer-settings",level:3},{value:"Complete Consumer Configuration",id:"complete-consumer-configuration",level:3},{value:"Environment-Based Configuration",id:"environment-based-configuration",level:2},{value:"Development Configuration",id:"development-configuration",level:3},{value:"Production Configuration",id:"production-configuration",level:3},{value:"Async Configuration",id:"async-configuration",level:3},{value:"Advanced Configuration Options",id:"advanced-configuration-options",level:2},{value:"Connection Pool Configuration",id:"connection-pool-configuration",level:3},{value:"Circuit Breaker Configuration",id:"circuit-breaker-configuration",level:3},{value:"Health Check Configuration",id:"health-check-configuration",level:3},{value:"Monitoring Configuration",id:"monitoring-configuration",level:3},{value:"Configuration Validation",id:"configuration-validation",level:2},{value:"Schema Validation",id:"schema-validation",level:3},{value:"Runtime Configuration Updates",id:"runtime-configuration-updates",level:3},{value:"Environment Variables Reference",id:"environment-variables-reference",level:2},{value:"Next Steps",id:"next-steps",level:2}];function u(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"configuration",children:"Configuration"})}),"\n",(0,t.jsx)(e.p,{children:"Complete configuration reference for the NestJS Kafka Client."}),"\n",(0,t.jsx)(e.h2,{id:"module-configuration",children:"Module Configuration"}),"\n",(0,t.jsx)(e.h3,{id:"basic-configuration",children:"Basic Configuration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"KafkaModule.forRoot({\n  clientId: 'my-app',\n  brokers: ['localhost:9092'],\n})\n"})}),"\n",(0,t.jsx)(e.h3,{id:"complete-configuration-options",children:"Complete Configuration Options"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"KafkaModule.forRoot({\n  // Basic connection settings\n  clientId: 'my-production-app',\n  brokers: ['kafka-1:9092', 'kafka-2:9092', 'kafka-3:9092'],\n  \n  // SSL Configuration\n  ssl: {\n    rejectUnauthorized: true,\n    ca: [fs.readFileSync('/path/to/ca-cert.pem', 'utf-8')],\n    key: fs.readFileSync('/path/to/client-key.pem', 'utf-8'),\n    cert: fs.readFileSync('/path/to/client-cert.pem', 'utf-8'),\n  },\n  \n  // SASL Authentication\n  sasl: {\n    mechanism: 'scram-sha-256', // 'plain', 'scram-sha-256', 'scram-sha-512'\n    username: process.env.KAFKA_USERNAME,\n    password: process.env.KAFKA_PASSWORD,\n  },\n  \n  // Connection settings\n  connectionTimeout: 3000,\n  authenticationTimeout: 1000,\n  reauthenticationThreshold: 10000,\n  requestTimeout: 30000,\n  enforceRequestTimeout: false,\n  \n  // Retry configuration\n  retry: {\n    initialRetryTime: 100,\n    retries: 8,\n    maxRetryTime: 30000,\n    factor: 0.2,\n    multiplier: 2,\n    restartOnFailure: async (e) => Promise.resolve(true),\n  },\n  \n  // Socket configuration\n  socketFactory: ({ host, port, ssl, onConnect }) => {\n    const socket = net.createConnection({ host, port });\n    socket.on('connect', onConnect);\n    return socket;\n  },\n  \n  // Logging\n  logLevel: 'info', // 'debug', 'info', 'warn', 'error', 'nothing'\n  logCreator: (logLevel) => ({ namespace, level, label, log }) => {\n    console.log(`[${namespace}] ${level}: ${log.message}`);\n  },\n})\n"})}),"\n",(0,t.jsx)(e.h2,{id:"producer-configuration",children:"Producer Configuration"}),"\n",(0,t.jsx)(e.h3,{id:"basic-producer-settings",children:"Basic Producer Settings"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"KafkaModule.forRoot({\n  clientId: 'my-app',\n  brokers: ['localhost:9092'],\n  \n  producer: {\n    // Performance settings\n    maxInFlightRequests: 5,\n    idempotent: true,\n    transactionTimeout: 30000,\n    \n    // Batching\n    allowAutoTopicCreation: false,\n    transactionTimeout: 30000,\n    \n    // Retry settings\n    retry: {\n      initialRetryTime: 100,\n      retries: 5,\n      maxRetryTime: 30000,\n    },\n  },\n})\n"})}),"\n",(0,t.jsx)(e.h3,{id:"advanced-producer-configuration",children:"Advanced Producer Configuration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"producer: {\n  // Idempotency and transactions\n  idempotent: true,\n  maxInFlightRequests: 5,\n  transactionTimeout: 30000,\n  \n  // Compression\n  compression: 'gzip', // 'none', 'gzip', 'snappy', 'lz4', 'zstd'\n  \n  // Batching configuration\n  batch: {\n    size: 16384, // 16KB\n    lingerMs: 5, // Wait up to 5ms for more messages\n  },\n  \n  // Partitioning\n  partitioner: 'default', // 'default', 'round-robin', 'random'\n  \n  // Metadata refresh\n  metadataMaxAge: 300000, // 5 minutes\n  \n  // Custom serializers\n  keySerializer: (key) => Buffer.from(key),\n  valueSerializer: (value) => Buffer.from(JSON.stringify(value)),\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"consumer-configuration",children:"Consumer Configuration"}),"\n",(0,t.jsx)(e.h3,{id:"basic-consumer-settings",children:"Basic Consumer Settings"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"@Consumer('my-topic', {\n  groupId: 'my-consumer-group',\n  sessionTimeout: 30000,\n  heartbeatInterval: 3000,\n})\n"})}),"\n",(0,t.jsx)(e.h3,{id:"complete-consumer-configuration",children:"Complete Consumer Configuration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"@Consumer('my-topic', {\n  // Consumer group settings\n  groupId: 'my-consumer-group',\n  sessionTimeout: 30000,\n  rebalanceTimeout: 60000,\n  heartbeatInterval: 3000,\n  \n  // Offset management\n  fromBeginning: false,\n  autoCommit: true,\n  autoCommitInterval: 5000,\n  autoCommitThreshold: null,\n  \n  // Fetch settings\n  minBytes: 1,\n  maxBytes: 1048576, // 1MB\n  maxWaitTimeInMs: 5000,\n  \n  // Batch processing\n  batch: true,\n  batchSize: 100,\n  batchTimeout: 5000,\n  \n  // Key grouping\n  groupByKey: true,\n  keyGroupingStrategy: 'hash', // 'hash', 'round-robin', 'custom'\n  \n  // Pressure management\n  maxConcurrency: 5,\n  backPressureThreshold: 80,\n  backPressureStrategy: 'pause', // 'pause', 'drop', 'buffer'\n  \n  // Idempotency\n  idempotencyKey: (msg) => msg.headers['idempotency-key'],\n  idempotencyTtl: 3600000, // 1 hour\n  idempotencyStorage: 'redis', // 'memory', 'redis', 'database'\n  \n  // Dead Letter Queue\n  dlq: {\n    topic: 'my-topic-dlq',\n    maxRetries: 3,\n    retryDelay: 1000,\n    exponentialBackoff: true,\n  },\n  \n  // Graceful shutdown\n  gracefulShutdown: {\n    timeout: 30000,\n    forceShutdown: true,\n  },\n  \n  // Custom deserializers\n  keyDeserializer: (key) => key.toString(),\n  valueDeserializer: (value) => JSON.parse(value.toString()),\n})\n"})}),"\n",(0,t.jsx)(e.h2,{id:"environment-based-configuration",children:"Environment-Based Configuration"}),"\n",(0,t.jsx)(e.h3,{id:"development-configuration",children:"Development Configuration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"// config/kafka.dev.ts\nexport const kafkaConfig = {\n  clientId: 'my-app-dev',\n  brokers: ['localhost:9092'],\n  logLevel: 'debug',\n  \n  producer: {\n    allowAutoTopicCreation: true,\n    idempotent: false, // Simpler for development\n  },\n  \n  consumer: {\n    fromBeginning: true, // Start from beginning in dev\n    autoCommit: true,\n  },\n};\n"})}),"\n",(0,t.jsx)(e.h3,{id:"production-configuration",children:"Production Configuration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"// config/kafka.prod.ts\nexport const kafkaConfig = {\n  clientId: process.env.KAFKA_CLIENT_ID,\n  brokers: process.env.KAFKA_BROKERS.split(','),\n  logLevel: 'warn',\n  \n  ssl: {\n    rejectUnauthorized: true,\n    ca: [fs.readFileSync(process.env.KAFKA_CA_CERT, 'utf-8')],\n    key: fs.readFileSync(process.env.KAFKA_CLIENT_KEY, 'utf-8'),\n    cert: fs.readFileSync(process.env.KAFKA_CLIENT_CERT, 'utf-8'),\n  },\n  \n  sasl: {\n    mechanism: 'scram-sha-256',\n    username: process.env.KAFKA_USERNAME,\n    password: process.env.KAFKA_PASSWORD,\n  },\n  \n  producer: {\n    idempotent: true,\n    maxInFlightRequests: 5,\n    transactionTimeout: 30000,\n    compression: 'gzip',\n  },\n  \n  consumer: {\n    sessionTimeout: 30000,\n    heartbeatInterval: 3000,\n    autoCommit: true,\n    autoCommitInterval: 5000,\n  },\n};\n"})}),"\n",(0,t.jsx)(e.h3,{id:"async-configuration",children:"Async Configuration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"KafkaModule.forRootAsync({\n  imports: [ConfigModule],\n  useFactory: async (configService: ConfigService) => {\n    const environment = configService.get('NODE_ENV');\n    \n    const baseConfig = {\n      clientId: configService.get('KAFKA_CLIENT_ID'),\n      brokers: configService.get('KAFKA_BROKERS').split(','),\n    };\n    \n    if (environment === 'production') {\n      return {\n        ...baseConfig,\n        ssl: {\n          rejectUnauthorized: true,\n          ca: [await fs.promises.readFile(configService.get('KAFKA_CA_CERT'), 'utf-8')],\n          key: await fs.promises.readFile(configService.get('KAFKA_CLIENT_KEY'), 'utf-8'),\n          cert: await fs.promises.readFile(configService.get('KAFKA_CLIENT_CERT'), 'utf-8'),\n        },\n        sasl: {\n          mechanism: 'scram-sha-256',\n          username: configService.get('KAFKA_USERNAME'),\n          password: configService.get('KAFKA_PASSWORD'),\n        },\n      };\n    }\n    \n    return baseConfig;\n  },\n  inject: [ConfigService],\n})\n"})}),"\n",(0,t.jsx)(e.h2,{id:"advanced-configuration-options",children:"Advanced Configuration Options"}),"\n",(0,t.jsx)(e.h3,{id:"connection-pool-configuration",children:"Connection Pool Configuration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"connectionPool: {\n  maxConnections: 10,\n  idleTimeout: 30000,\n  acquireTimeout: 10000,\n  evictionRunIntervalMillis: 30000,\n  numTestsPerEvictionRun: 3,\n  softIdleTimeoutMillis: 30000,\n  testOnBorrow: true,\n  testOnReturn: false,\n  testWhileIdle: true,\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"circuit-breaker-configuration",children:"Circuit Breaker Configuration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"circuitBreaker: {\n  threshold: 5, // Number of failures before opening\n  timeout: 60000, // Time to wait before trying again\n  monitor: true, // Enable monitoring\n  onOpen: () => console.log('Circuit breaker opened'),\n  onHalfOpen: () => console.log('Circuit breaker half-open'),\n  onClose: () => console.log('Circuit breaker closed'),\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"health-check-configuration",children:"Health Check Configuration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"healthCheck: {\n  enabled: true,\n  interval: 30000, // Check every 30 seconds\n  timeout: 5000, // Timeout after 5 seconds\n  retries: 3,\n  \n  // Custom health check\n  customCheck: async (kafka) => {\n    const admin = kafka.admin();\n    await admin.connect();\n    const metadata = await admin.fetchTopicMetadata();\n    await admin.disconnect();\n    return metadata.topics.length > 0;\n  },\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"monitoring-configuration",children:"Monitoring Configuration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"monitoring: {\n  enabled: true,\n  metricsInterval: 10000, // Collect metrics every 10 seconds\n  \n  // Custom metrics collector\n  metricsCollector: (metrics) => {\n    // Send to your monitoring system\n    console.log('Kafka metrics:', metrics);\n  },\n  \n  // Event listeners\n  events: {\n    'producer.connect': () => console.log('Producer connected'),\n    'consumer.connect': () => console.log('Consumer connected'),\n    'error': (error) => console.error('Kafka error:', error),\n  },\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"configuration-validation",children:"Configuration Validation"}),"\n",(0,t.jsx)(e.h3,{id:"schema-validation",children:"Schema Validation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"import * as Joi from 'joi';\n\nconst kafkaConfigSchema = Joi.object({\n  clientId: Joi.string().required(),\n  brokers: Joi.array().items(Joi.string()).min(1).required(),\n  ssl: Joi.object({\n    rejectUnauthorized: Joi.boolean(),\n    ca: Joi.array().items(Joi.string()),\n    key: Joi.string(),\n    cert: Joi.string(),\n  }).optional(),\n  sasl: Joi.object({\n    mechanism: Joi.string().valid('plain', 'scram-sha-256', 'scram-sha-512'),\n    username: Joi.string().required(),\n    password: Joi.string().required(),\n  }).optional(),\n});\n\n// Validate configuration\nconst { error, value } = kafkaConfigSchema.validate(config);\nif (error) {\n  throw new Error(`Invalid Kafka configuration: ${error.message}`);\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"runtime-configuration-updates",children:"Runtime Configuration Updates"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"@Injectable()\nexport class KafkaConfigService {\n  private config: KafkaConfig;\n\n  async updateConfig(newConfig: Partial<KafkaConfig>) {\n    // Validate new configuration\n    const validatedConfig = await this.validateConfig(newConfig);\n    \n    // Apply configuration changes\n    this.config = { ...this.config, ...validatedConfig };\n    \n    // Restart connections if needed\n    await this.restartConnections();\n  }\n\n  private async restartConnections() {\n    // Gracefully restart Kafka connections with new config\n  }\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"environment-variables-reference",children:"Environment Variables Reference"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Basic connection\nKAFKA_CLIENT_ID=my-app\nKAFKA_BROKERS=kafka-1:9092,kafka-2:9092,kafka-3:9092\n\n# Authentication\nKAFKA_USERNAME=your-username\nKAFKA_PASSWORD=your-password\nKAFKA_SASL_MECHANISM=scram-sha-256\n\n# SSL\nKAFKA_SSL=true\nKAFKA_CA_CERT=/path/to/ca-cert.pem\nKAFKA_CLIENT_KEY=/path/to/client-key.pem\nKAFKA_CLIENT_CERT=/path/to/client-cert.pem\n\n# Performance\nKAFKA_MAX_IN_FLIGHT_REQUESTS=5\nKAFKA_REQUEST_TIMEOUT=30000\nKAFKA_CONNECTION_TIMEOUT=3000\n\n# Consumer settings\nKAFKA_CONSUMER_GROUP_ID=my-consumer-group\nKAFKA_SESSION_TIMEOUT=30000\nKAFKA_HEARTBEAT_INTERVAL=3000\n\n# Batch processing\nKAFKA_BATCH_SIZE=100\nKAFKA_BATCH_TIMEOUT=5000\nKAFKA_MAX_CONCURRENCY=5\n\n# Monitoring\nKAFKA_LOG_LEVEL=info\nKAFKA_HEALTH_CHECK_INTERVAL=30000\n"})}),"\n",(0,t.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"./best-practices",children:"Learn Best Practices"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"./troubleshooting",children:"Troubleshooting Guide"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"./",children:"Back to Overview"})}),"\n"]})]})}function d(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(u,{...n})}):u(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>s});var o=i(6540);const t={},r=o.createContext(t);function a(n){const e=o.useContext(r);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),o.createElement(r.Provider,{value:e},n.children)}}}]);