"use strict";(self.webpackChunknestjs_toolkit_docs=self.webpackChunknestjs_toolkit_docs||[]).push([[8453],{5519:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"kafka/troubleshooting","title":"Troubleshooting","description":"Common issues and solutions when using the NestJS Kafka Client.","source":"@site/docs/kafka/troubleshooting.md","sourceDirName":"kafka","slug":"/kafka/troubleshooting","permalink":"/libraries/docs/kafka/troubleshooting","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"NestJS Kafka Client","permalink":"/libraries/docs/kafka/"}}');var i=s(4848),o=s(8453);const t={},l="Troubleshooting",a={},c=[{value:"Connection Issues",id:"connection-issues",level:2},{value:"Cannot Connect to Kafka Brokers",id:"cannot-connect-to-kafka-brokers",level:3},{value:"SSL/TLS Connection Failures",id:"ssltls-connection-failures",level:3},{value:"SASL Authentication Failures",id:"sasl-authentication-failures",level:3},{value:"Consumer Issues",id:"consumer-issues",level:2},{value:"High Consumer Lag",id:"high-consumer-lag",level:3},{value:"Consumer Not Receiving Messages",id:"consumer-not-receiving-messages",level:3},{value:"Memory Issues with Large Batches",id:"memory-issues-with-large-batches",level:3},{value:"Producer Issues",id:"producer-issues",level:2},{value:"Message Send Failures",id:"message-send-failures",level:3},{value:"Duplicate Messages",id:"duplicate-messages",level:3},{value:"Performance Issues",id:"performance-issues",level:2},{value:"Low Throughput",id:"low-throughput",level:3},{value:"High Latency",id:"high-latency",level:3},{value:"Error Handling Issues",id:"error-handling-issues",level:2},{value:"Messages Stuck in DLQ",id:"messages-stuck-in-dlq",level:3},{value:"Infinite Retry Loops",id:"infinite-retry-loops",level:3},{value:"Monitoring and Debugging",id:"monitoring-and-debugging",level:2},{value:"Enable Debug Logging",id:"enable-debug-logging",level:3},{value:"Health Check Failures",id:"health-check-failures",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:3},{value:"Common Error Messages and Solutions",id:"common-error-messages-and-solutions",level:2},{value:"&quot;Broker may not be available&quot;",id:"broker-may-not-be-available",level:3},{value:"&quot;Request timed out&quot;",id:"request-timed-out",level:3},{value:"&quot;Topic does not exist&quot;",id:"topic-does-not-exist",level:3},{value:"&quot;Not authorized to access topic&quot;",id:"not-authorized-to-access-topic",level:3},{value:"&quot;Consumer group rebalancing&quot;",id:"consumer-group-rebalancing",level:3},{value:"&quot;Offset out of range&quot;",id:"offset-out-of-range",level:3},{value:"Getting Help",id:"getting-help",level:2},{value:"Collect Diagnostic Information",id:"collect-diagnostic-information",level:3},{value:"Enable Detailed Logging",id:"enable-detailed-logging",level:3},{value:"Create Minimal Reproduction",id:"create-minimal-reproduction",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"troubleshooting",children:"Troubleshooting"})}),"\n",(0,i.jsx)(n.p,{children:"Common issues and solutions when using the NestJS Kafka Client."}),"\n",(0,i.jsx)(n.h2,{id:"connection-issues",children:"Connection Issues"}),"\n",(0,i.jsx)(n.h3,{id:"cannot-connect-to-kafka-brokers",children:"Cannot Connect to Kafka Brokers"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Connection timeout errors"}),"\n",(0,i.jsx)(n.li,{children:'"Failed to connect to broker" messages'}),"\n",(0,i.jsx)(n.li,{children:"Application startup failures"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Check broker connectivity\nKafkaModule.forRoot({\n  clientId: 'my-app',\n  brokers: ['localhost:9092'], // Verify broker addresses\n  connectionTimeout: 10000, // Increase timeout\n  retry: {\n    initialRetryTime: 100,\n    retries: 8,\n  },\n})\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Debugging Steps:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Verify broker addresses and ports"}),"\n",(0,i.jsxs)(n.li,{children:["Check network connectivity: ",(0,i.jsx)(n.code,{children:"telnet kafka-broker 9092"})]}),"\n",(0,i.jsx)(n.li,{children:"Verify firewall rules"}),"\n",(0,i.jsx)(n.li,{children:"Check Kafka broker logs"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ssltls-connection-failures",children:"SSL/TLS Connection Failures"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"SSL handshake failures"}),"\n",(0,i.jsx)(n.li,{children:"Certificate verification errors"}),"\n",(0,i.jsx)(n.li,{children:'"unable to verify the first certificate" errors'}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Proper SSL configuration\nKafkaModule.forRoot({\n  ssl: {\n    rejectUnauthorized: true,\n    ca: [fs.readFileSync('/path/to/ca-cert.pem', 'utf-8')],\n    key: fs.readFileSync('/path/to/client-key.pem', 'utf-8'),\n    cert: fs.readFileSync('/path/to/client-cert.pem', 'utf-8'),\n  },\n})\n\n// For development (not recommended for production)\nKafkaModule.forRoot({\n  ssl: {\n    rejectUnauthorized: false, // Only for development\n  },\n})\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Debugging Steps:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Verify certificate paths and permissions"}),"\n",(0,i.jsxs)(n.li,{children:["Check certificate validity: ",(0,i.jsx)(n.code,{children:"openssl x509 -in cert.pem -text -noout"})]}),"\n",(0,i.jsx)(n.li,{children:"Verify CA certificate chain"}),"\n",(0,i.jsxs)(n.li,{children:["Test SSL connection: ",(0,i.jsx)(n.code,{children:"openssl s_client -connect kafka-broker:9092"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"sasl-authentication-failures",children:"SASL Authentication Failures"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Authentication failed errors"}),"\n",(0,i.jsx)(n.li,{children:'"Invalid username or password" messages'}),"\n",(0,i.jsx)(n.li,{children:"Connection drops after initial connect"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Correct SASL configuration\nKafkaModule.forRoot({\n  sasl: {\n    mechanism: 'scram-sha-256', // Match broker configuration\n    username: process.env.KAFKA_USERNAME,\n    password: process.env.KAFKA_PASSWORD,\n  },\n})\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Debugging Steps:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Verify username and password"}),"\n",(0,i.jsx)(n.li,{children:"Check SASL mechanism matches broker configuration"}),"\n",(0,i.jsx)(n.li,{children:"Verify user permissions in Kafka ACLs"}),"\n",(0,i.jsx)(n.li,{children:"Check broker SASL configuration"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"consumer-issues",children:"Consumer Issues"}),"\n",(0,i.jsx)(n.h3,{id:"high-consumer-lag",children:"High Consumer Lag"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Messages piling up in topics"}),"\n",(0,i.jsx)(n.li,{children:"Slow message processing"}),"\n",(0,i.jsx)(n.li,{children:"Consumer group lag alerts"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Increase processing capacity\n@Consumer('high-volume-topic', {\n  batch: true,\n  batchSize: 500, // Increase batch size\n  maxConcurrency: 10, // Increase concurrency\n  batchTimeout: 2000, // Reduce timeout for faster processing\n})\nexport class OptimizedConsumer {\n  async handleBatch(messages: KafkaMessage[]) {\n    // Process in parallel chunks\n    const chunks = this.chunkArray(messages, 50);\n    await Promise.all(chunks.map(chunk => this.processChunk(chunk)));\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Debugging Steps:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Monitor consumer group lag: ",(0,i.jsx)(n.code,{children:"kafka-consumer-groups.sh --describe --group my-group"})]}),"\n",(0,i.jsx)(n.li,{children:"Check processing time per message"}),"\n",(0,i.jsx)(n.li,{children:"Verify consumer is not blocked by downstream services"}),"\n",(0,i.jsx)(n.li,{children:"Scale consumer instances horizontally"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"consumer-not-receiving-messages",children:"Consumer Not Receiving Messages"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Consumer connects but receives no messages"}),"\n",(0,i.jsx)(n.li,{children:"Messages visible in topic but not consumed"}),"\n",(0,i.jsx)(n.li,{children:"Consumer group shows no active members"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Check consumer configuration\n@Consumer('my-topic', {\n  groupId: 'my-consumer-group', // Verify group ID\n  fromBeginning: true, // Start from beginning if needed\n  sessionTimeout: 30000,\n  heartbeatInterval: 3000,\n})\nexport class DebuggingConsumer {\n  async handleMessage(message: KafkaMessage) {\n    console.log('Received message:', message);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Debugging Steps:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Verify topic exists and has messages"}),"\n",(0,i.jsx)(n.li,{children:"Check consumer group membership"}),"\n",(0,i.jsx)(n.li,{children:"Verify partition assignment"}),"\n",(0,i.jsx)(n.li,{children:"Check for consumer group rebalancing issues"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"memory-issues-with-large-batches",children:"Memory Issues with Large Batches"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Out of memory errors"}),"\n",(0,i.jsx)(n.li,{children:"Application crashes during batch processing"}),"\n",(0,i.jsx)(n.li,{children:"High memory usage spikes"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Memory-efficient batch processing\n@Consumer('large-messages', {\n  batch: true,\n  batchSize: 50, // Reduce batch size\n  memoryManagement: {\n    maxMemoryUsage: '512MB',\n    streamProcessing: true,\n  },\n})\nexport class MemoryEfficientConsumer {\n  async handleBatch(messages: KafkaMessage[]) {\n    // Process in smaller chunks\n    for (let i = 0; i < messages.length; i += 10) {\n      const chunk = messages.slice(i, i + 10);\n      await this.processChunk(chunk);\n      \n      // Force garbage collection if available\n      if (global.gc && i % 100 === 0) {\n        global.gc();\n      }\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"producer-issues",children:"Producer Issues"}),"\n",(0,i.jsx)(n.h3,{id:"message-send-failures",children:"Message Send Failures"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'"Request timed out" errors'}),"\n",(0,i.jsx)(n.li,{children:"Messages not appearing in topics"}),"\n",(0,i.jsx)(n.li,{children:"Producer connection drops"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Robust producer configuration\nKafkaModule.forRoot({\n  producer: {\n    maxInFlightRequests: 5,\n    idempotent: true,\n    requestTimeout: 30000,\n    retry: {\n      initialRetryTime: 100,\n      retries: 5,\n      maxRetryTime: 30000,\n    },\n  },\n})\n\n// Implement retry logic in service\n@Injectable()\nexport class RobustProducerService {\n  async sendWithRetry(topic: string, message: any, maxRetries = 3) {\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        await this.kafkaClient.send(topic, message);\n        return;\n      } catch (error) {\n        if (attempt === maxRetries) throw error;\n        \n        const delay = Math.min(1000 * Math.pow(2, attempt), 10000);\n        await this.sleep(delay);\n      }\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"duplicate-messages",children:"Duplicate Messages"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Same message processed multiple times"}),"\n",(0,i.jsx)(n.li,{children:"Idempotency key violations"}),"\n",(0,i.jsx)(n.li,{children:"Data inconsistencies"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Enable idempotent producer\nKafkaModule.forRoot({\n  producer: {\n    idempotent: true, // Prevents duplicates at producer level\n    maxInFlightRequests: 5,\n  },\n})\n\n// Implement consumer-side idempotency\n@Consumer('orders', {\n  idempotencyKey: (msg) => msg.headers['idempotency-key'],\n  idempotencyTtl: 3600000, // 1 hour\n})\nexport class IdempotentConsumer {\n  async handleMessage(message: KafkaMessage) {\n    // Automatically deduplicated by framework\n    await this.processOrder(message);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"performance-issues",children:"Performance Issues"}),"\n",(0,i.jsx)(n.h3,{id:"low-throughput",children:"Low Throughput"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Messages processed slowly"}),"\n",(0,i.jsx)(n.li,{children:"High latency between send and receive"}),"\n",(0,i.jsx)(n.li,{children:"Poor application performance"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Optimize for throughput\nKafkaModule.forRoot({\n  producer: {\n    compression: 'gzip', // Reduce network usage\n    batch: {\n      size: 16384, // 16KB batches\n      lingerMs: 5, // Wait 5ms for more messages\n    },\n  },\n})\n\n@Consumer('high-throughput-topic', {\n  batch: true,\n  batchSize: 1000, // Large batches\n  batchTimeout: 1000, // Quick processing\n  maxConcurrency: 20, // High concurrency\n})\nexport class HighThroughputConsumer {\n  async handleBatch(messages: KafkaMessage[]) {\n    // Parallel processing\n    await Promise.all(\n      this.chunkArray(messages, 100).map(chunk => \n        this.processChunk(chunk)\n      )\n    );\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"high-latency",children:"High Latency"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Long delays between message send and processing"}),"\n",(0,i.jsx)(n.li,{children:"Slow response times"}),"\n",(0,i.jsx)(n.li,{children:"Poor user experience"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Optimize for low latency\n@Consumer('real-time-alerts', {\n  batch: false, // Process immediately\n  maxConcurrency: 50, // High concurrency for parallel processing\n})\nexport class LowLatencyConsumer {\n  async handleMessage(message: KafkaMessage) {\n    // Immediate processing\n    await this.processAlert(message);\n  }\n}\n\n// Reduce producer batching for low latency\nKafkaModule.forRoot({\n  producer: {\n    batch: {\n      lingerMs: 0, // Send immediately\n    },\n  },\n})\n"})}),"\n",(0,i.jsx)(n.h2,{id:"error-handling-issues",children:"Error Handling Issues"}),"\n",(0,i.jsx)(n.h3,{id:"messages-stuck-in-dlq",children:"Messages Stuck in DLQ"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"High number of messages in dead letter queue"}),"\n",(0,i.jsx)(n.li,{children:"Repeated processing failures"}),"\n",(0,i.jsx)(n.li,{children:"Error alerts from DLQ monitoring"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Analyze and process DLQ messages\n@Consumer('orders-dlq')\nexport class DlqProcessor {\n  async handleMessage(message: KafkaMessage) {\n    const originalMessage = JSON.parse(message.value.toString());\n    const failureReason = message.headers['failure-reason'];\n    \n    // Log for analysis\n    this.logger.error('DLQ message analysis', {\n      originalMessage,\n      failureReason,\n      retryCount: message.headers['retry-count'],\n    });\n    \n    // Attempt manual processing or alert administrators\n    if (this.canReprocess(failureReason)) {\n      await this.reprocessMessage(originalMessage);\n    } else {\n      await this.alertAdministrators(originalMessage, failureReason);\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"infinite-retry-loops",children:"Infinite Retry Loops"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Same message retried continuously"}),"\n",(0,i.jsx)(n.li,{children:"High CPU usage from retry attempts"}),"\n",(0,i.jsx)(n.li,{children:"Consumer appears stuck"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Implement smart retry logic\n@Consumer('orders', {\n  dlq: {\n    topic: 'orders-dlq',\n    maxRetries: 3,\n    shouldRetry: (error, message, attempt) => {\n      // Don't retry validation errors\n      if (error.name === 'ValidationError') return false;\n      \n      // Don't retry after max attempts\n      if (attempt >= 3) return false;\n      \n      // Only retry transient errors\n      return ['NetworkError', 'TimeoutError'].includes(error.name);\n    },\n  },\n})\nexport class SmartRetryConsumer {\n  async handleMessage(message: KafkaMessage) {\n    try {\n      await this.processMessage(message);\n    } catch (error) {\n      // Classify error for retry decision\n      error.name = this.classifyError(error);\n      throw error;\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"monitoring-and-debugging",children:"Monitoring and Debugging"}),"\n",(0,i.jsx)(n.h3,{id:"enable-debug-logging",children:"Enable Debug Logging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Enable detailed logging\nKafkaModule.forRoot({\n  logLevel: 'debug',\n  logCreator: (logLevel) => ({ namespace, level, label, log }) => {\n    console.log(`[${new Date().toISOString()}] [${namespace}] ${level}: ${log.message}`, log);\n  },\n})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"health-check-failures",children:"Health Check Failures"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Comprehensive health checks\n@Injectable()\nexport class KafkaHealthService {\n  constructor(private kafkaHealth: KafkaHealthIndicator) {}\n\n  async checkHealth() {\n    try {\n      const health = await this.kafkaHealth.isHealthy('kafka');\n      \n      if (!health.kafka.status === 'up') {\n        // Investigate connection issues\n        await this.diagnoseConnection();\n      }\n      \n      return health;\n    } catch (error) {\n      this.logger.error('Health check failed', error);\n      throw error;\n    }\n  }\n\n  private async diagnoseConnection() {\n    // Check broker connectivity\n    // Verify authentication\n    // Test topic access\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Monitor key metrics\n@Injectable()\nexport class KafkaMonitoringService {\n  private metrics = {\n    messagesProduced: 0,\n    messagesConsumed: 0,\n    errors: 0,\n    avgProcessingTime: 0,\n  };\n\n  @Cron('0 * * * * *') // Every minute\n  reportMetrics() {\n    this.logger.log('Kafka Metrics', this.metrics);\n    \n    // Alert on anomalies\n    if (this.metrics.errors > 100) {\n      this.alertHighErrorRate();\n    }\n    \n    if (this.metrics.avgProcessingTime > 5000) {\n      this.alertSlowProcessing();\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"common-error-messages-and-solutions",children:"Common Error Messages and Solutions"}),"\n",(0,i.jsx)(n.h3,{id:"broker-may-not-be-available",children:'"Broker may not be available"'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cause"}),": Network connectivity issues or broker down"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Check broker status and network connectivity"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"request-timed-out",children:'"Request timed out"'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cause"}),": Network latency or broker overload"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Increase ",(0,i.jsx)(n.code,{children:"requestTimeout"})," and check broker performance"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"topic-does-not-exist",children:'"Topic does not exist"'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cause"}),": Topic not created or wrong topic name"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Create topic or verify topic name"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"not-authorized-to-access-topic",children:'"Not authorized to access topic"'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cause"}),": Insufficient permissions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Check Kafka ACLs and user permissions"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"consumer-group-rebalancing",children:'"Consumer group rebalancing"'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cause"}),": Consumer instances joining/leaving group"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Normal behavior, but frequent rebalancing indicates issues"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"offset-out-of-range",children:'"Offset out of range"'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cause"}),": Trying to read from invalid offset"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Reset consumer group offset or use ",(0,i.jsx)(n.code,{children:"fromBeginning: true"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"getting-help",children:"Getting Help"}),"\n",(0,i.jsx)(n.h3,{id:"collect-diagnostic-information",children:"Collect Diagnostic Information"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check Kafka cluster status\nkafka-topics.sh --list --bootstrap-server localhost:9092\n\n# Check consumer group status\nkafka-consumer-groups.sh --describe --group my-group --bootstrap-server localhost:9092\n\n# Check topic details\nkafka-topics.sh --describe --topic my-topic --bootstrap-server localhost:9092\n"})}),"\n",(0,i.jsx)(n.h3,{id:"enable-detailed-logging",children:"Enable Detailed Logging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Temporary debug configuration\nKafkaModule.forRoot({\n  logLevel: 'debug',\n  // ... other config\n})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"create-minimal-reproduction",children:"Create Minimal Reproduction"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Simple test to isolate issues\n@Controller('test')\nexport class KafkaTestController {\n  constructor(private kafkaClient: KafkaClient) {}\n\n  @Post('send')\n  async testSend() {\n    await this.kafkaClient.send('test-topic', {\n      key: 'test-key',\n      value: JSON.stringify({ message: 'test' }),\n    });\n    return { status: 'sent' };\n  }\n}\n\n@Consumer('test-topic')\nexport class TestConsumer {\n  async handleMessage(message: KafkaMessage) {\n    console.log('Received test message:', message.value.toString());\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./best-practices",children:"Review Best Practices"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./configuration",children:"Check Configuration"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./",children:"Back to Overview"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var r=s(6540);const i={},o=r.createContext(i);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);