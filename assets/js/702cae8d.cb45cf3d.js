"use strict";(self.webpackChunknestjs_toolkit_docs=self.webpackChunknestjs_toolkit_docs||[]).push([[1217],{7229:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"workflow/intro","title":"NestJS Workflow & State Machine","description":"## Overview","source":"@site/docs/workflow/intro.md","sourceDirName":"workflow","slug":"/workflow/intro","permalink":"/libraries/docs/workflow/intro","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"Introduction"},"sidebar":"tutorialSidebar","previous":{"title":"Quickstart","permalink":"/libraries/docs/workflow/quickstart"},"next":{"title":"Why","permalink":"/libraries/docs/workflow/workflows"}}');var i=r(4848),o=r(8453);const s={sidebar_position:2,sidebar_label:"Introduction"},a="NestJS Workflow & State Machine",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Module Registration",id:"module-registration",level:3},{value:"Define a Workflow",id:"define-a-workflow",level:3},{value:"Using Workflows in Services",id:"using-workflows-in-services",level:3},{value:"Class-based Actions with Decorators",id:"class-based-actions-with-decorators",level:3},{value:"Benefits",id:"benefits",level:2},{value:"Maintainability",id:"maintainability",level:3},{value:"Architecture Governance",id:"architecture-governance",level:3},{value:"Scalability &amp; Extensibility",id:"scalability--extensibility",level:3},{value:"Event-Driven &amp; Declarative",id:"event-driven--declarative",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"WorkflowModule",id:"workflowmodule",level:3},{value:"WorkflowDefinition",id:"workflowdefinition",level:3},{value:"Workflow Service",id:"workflow-service",level:3},{value:"Decorators",id:"decorators",level:3},{value:"From Chaos to Clarity",id:"from-chaos-to-clarity",level:2},{value:"Repository",id:"repository",level:2},{value:"License",id:"license",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"nestjs-workflow--state-machine",children:"NestJS Workflow & State Machine"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"A powerful, intuitive workflow management tool built specifically for NestJS and Node.js applications. This library allows you to define, manage, and execute workflows using a straightforward, declarative syntax, transforming complex state transitions into structured, maintainable code."}),"\n",(0,i.jsx)(n.p,{children:"Instead of writing intricate conditional logic scattered across your application, NestJS Workflow provides a centralized approach to workflow management, leading to clearer code, better governance, and improved maintainability."}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install @jescrich/nestjs-workflow\n"})}),"\n",(0,i.jsx)(n.p,{children:"or using Yarn:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"yarn add @jescrich/nestjs-workflow\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.h3,{id:"module-registration",children:"Module Registration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Module } from '@nestjs/common';\nimport { WorkflowModule } from '@jescrich/nestjs-workflow';\n\n@Module({\n  imports: [\n    WorkflowModule.register({\n      name: 'orderWorkflow',\n      definition: orderWorkflowDefinition,\n    }),\n    WorkflowModule.forRoot({ storage: { type: 'memory' } }),\n  ],\n})\nexport class AppModule {}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"app.module.ts"})}),"\n",(0,i.jsx)(n.h3,{id:"define-a-workflow",children:"Define a Workflow"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { WorkflowDefinition } from '@jescrich/nestjs-workflow';\nimport { Order, OrderEvent, OrderStatus } from '../orders/types';\n\nconst orderWorkflowDefinition: WorkflowDefinition<Order, any, OrderEvent, OrderStatus> = {\n  FinalStates: [OrderStatus.Completed, OrderStatus.Failed],\n  Transitions: [\n    {\n      from: OrderStatus.Pending,\n      to: OrderStatus.Processing,\n      event: OrderEvent.Submit,\n      conditions: [(entity) => entity.price > 10],\n    },\n    {\n      from: OrderStatus.Pending,\n      to: OrderStatus.Pending,\n      event: OrderEvent.Update,\n      actions: [(entity, payload) => {\n        entity.price = payload.price;\n        entity.items = payload.items;\n        return Promise.resolve(entity);\n      }],\n    },\n    {\n      from: OrderStatus.Processing,\n      to: OrderStatus.Completed,\n      event: OrderEvent.Complete,\n    },\n    {\n      from: OrderStatus.Processing,\n      to: OrderStatus.Failed,\n      event: OrderEvent.Fail,\n    },\n  ],\n};\n\nexport default orderWorkflowDefinition;\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"order.workflow.ts"})}),"\n",(0,i.jsx)(n.h3,{id:"using-workflows-in-services",children:"Using Workflows in Services"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Injectable, Inject } from '@nestjs/common';\nimport { Workflow } from '@jescrich/nestjs-workflow';\nimport { Order, OrderEvent } from './types';\n\n@Injectable()\nexport class OrderService {\n  constructor(\n    @Inject('orderWorkflow') private readonly workflow: Workflow<Order, OrderEvent>,\n  ) {}\n\n  async submitOrder(urn: string) {\n    return await this.workflow.emit({ urn, event: OrderEvent.Submit });\n  }\n\n  async updateOrder(urn: string, price: number, items: string[]) {\n    return await this.workflow.emit({\n      urn,\n      event: OrderEvent.Update,\n      payload: { price, items },\n    });\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"orders.service.ts"})}),"\n",(0,i.jsx)(n.h3,{id:"class-based-actions-with-decorators",children:"Class-based Actions with Decorators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Injectable } from '@nestjs/common';\nimport { WorkflowAction, OnEvent, OnStatusChanged } from '@jescrich/nestjs-workflow';\nimport { Order, OrderEvent, OrderStatus } from '../orders/types';\n\n@Injectable()\n@WorkflowAction()\nexport class OrderActions {\n  @OnEvent({ event: OrderEvent.Submit })\n  execute({ entity, payload }: { entity: Order; payload: any }) {\n    entity.price *= 100;\n    return Promise.resolve(entity);\n  }\n\n  @OnStatusChanged({ from: OrderStatus.Pending, to: OrderStatus.Processing })\n  onProcessing({ entity }: { entity: Order }) {\n    entity.name = 'Processing Order';\n    return Promise.resolve(entity);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"order.actions.ts"})}),"\n",(0,i.jsx)(n.h2,{id:"benefits",children:"Benefits"}),"\n",(0,i.jsx)(n.h3,{id:"maintainability",children:"Maintainability"}),"\n",(0,i.jsx)(n.p,{children:"Workflow definitions centralize state logic, making it easy to update or extend. This reduces the cognitive load on developers and simplifies debugging."}),"\n",(0,i.jsx)(n.h3,{id:"architecture-governance",children:"Architecture Governance"}),"\n",(0,i.jsx)(n.p,{children:"NestJS Workflow enforces clear and consistent state management practices. Developers adhere to a structured approach, aligning code with enterprise architecture standards."}),"\n",(0,i.jsx)(n.h3,{id:"scalability--extensibility",children:"Scalability & Extensibility"}),"\n",(0,i.jsx)(n.p,{children:"The workflow engine integrates seamlessly into NestJS applications, enabling easy extension through custom actions, conditions, and event handlers."}),"\n",(0,i.jsx)(n.h3,{id:"event-driven--declarative",children:"Event-Driven & Declarative"}),"\n",(0,i.jsx)(n.p,{children:"Built on NestJS's event system, the workflow module enables clear and robust event-driven architectures that are easier to reason about and document."}),"\n",(0,i.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,i.jsx)(n.h3,{id:"workflowmodule",children:"WorkflowModule"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Register a specific workflow\nWorkflowModule.register({\n  name: string,\n  definition: WorkflowDefinition<Entity, Payload, Event, Status>\n})\n\n// Configure the workflow module globally\nWorkflowModule.forRoot({\n  storage: { type: 'memory' | 'database' }\n})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"workflowdefinition",children:"WorkflowDefinition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface WorkflowDefinition<Entity, Payload, Event, Status> {\n  FinalStates: Status[];\n  Transitions: Array<{\n    from: Status;\n    to: Status;\n    event: Event;\n    conditions?: Array<(entity: Entity) => boolean>;\n    actions?: Array<(entity: Entity, payload?: Payload) => Promise<Entity>>;\n  }>;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"workflow-service",children:"Workflow Service"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Emit an event to trigger a workflow transition\nworkflow.emit({\n  urn: string,\n  event: Event,\n  payload?: any\n}): Promise<Entity>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"decorators",children:"Decorators"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@WorkflowAction()"})," - Mark a class as containing workflow action handlers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@OnEvent({ event })"})," - Define an event handler method"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@OnStatusChanged({ from, to })"})," - Define a status transition handler method"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"from-chaos-to-clarity",children:"From Chaos to Clarity"}),"\n",(0,i.jsx)(n.p,{children:"By adopting NestJS Workflow, you transform complex, error-prone state transitions into structured, clear, and maintainable workflows. This architectural clarity improves team efficiency, reduces bugs, and makes scaling enterprise applications much smoother."}),"\n",(0,i.jsx)(n.h2,{id:"repository",children:"Repository"}),"\n",(0,i.jsxs)(n.p,{children:["Explore NestJS Workflow & State Machine: ",(0,i.jsx)(n.a,{href:"https://github.com/jescrich/nestjs-workflow",children:"https://github.com/jescrich/nestjs-workflow"})]}),"\n",(0,i.jsx)(n.h2,{id:"license",children:"License"}),"\n",(0,i.jsx)(n.p,{children:"This project is licensed under the MIT License."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var t=r(6540);const i={},o=t.createContext(i);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);